# -*- coding: utf-8 -*-
"""Copy of SDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pPwt8yfp_wgIgfHoepFgCyOKnCE-xURM
"""

import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      console.error('OpenAI API key is not configured');
      return new Response(JSON.stringify({
        error: 'OpenAI API key is not configured. Please add your OPENAI_API_KEY to the Supabase secrets.'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { message, userEmail } = await req.json();

    console.log('Received message:', message, 'from user:', userEmail);

    if (!message || !userEmail) {
      return new Response(JSON.stringify({ error: 'Message and user email are required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Making request to OpenAI...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `You are a helpful AI assistant chatting with a user (${userEmail}). Be friendly, informative, and engaging. Provide helpful responses to their questions and maintain a conversational tone. Keep responses concise but informative.`
          },
          { role: 'user', content: message }
        ],
        max_tokens: 1000,
        temperature: 0.7
      }),
    });

    console.log('OpenAI response status:', response.status);

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenAI API error:', response.status, errorData);
      throw new Error(`OpenAI API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('AI response generated successfully');

    // Check if we should include an image suggestion
    const imageKeywords = ['image', 'picture', 'photo', 'visual', 'show me', 'diagram', 'chart', 'illustration'];
    const includeImage = imageKeywords.some(keyword => message.toLowerCase().includes(keyword));

    let imageUrl = null;
    if (includeImage) {
      // Generate a relevant image URL from Unsplash based on the message content
      const searchTerm = message.toLowerCase()
        .replace(/[^a-z0-9\s]/g, '')
        .split(' ')
        .filter(word => word.length > 2)
        .slice(0, 2)
        .join(',');
      imageUrl = `https://source.unsplash.com/800x600/?${searchTerm || 'nature'}`;
    }

    return new Response(JSON.stringify({
      response: aiResponse,
      includeImage,
      imageUrl
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in chat-ai function:', error);
    return new Response(JSON.stringify({
      error: 'Failed to get AI response. Please try again.',
      details: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});